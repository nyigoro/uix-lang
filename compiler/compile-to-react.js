import fs from "fs";
import * as parser from "./parser.js";

const code = fs.readFileSync("uix/example.uix", "utf-8");
const tagMap = {
  App: "div",
  Title: "h1",
  Row: "div",
  Button: "button",
  Input: "input"
};
const ast = parser.parse(code);

// Converts a props object to JSX string
function renderProps(props) {
  // Ensure props is an object, defaulting to an empty object if null or undefined
  const safeProps = props || {};
  return Object.entries(safeProps).map(([key, value]) => {
    if (key === "bind") {
      // For 'bind' prop, generate value and onChange handler
      return `value={${value}} onChange={e => set${capitalize(value)}(e.target.value)}`;
    }
    if (key.startsWith("on")) {
      // For event handlers (e.g., onClick), directly use the value as a function reference
      return `${key}={${value}}`;
    }
    if (typeof value === "string") {
      // For string values, enclose in double quotes
      return `${key}="${value}"`;
    }
    // For other types (numbers, booleans, objects), stringify and enclose in curly braces
    return `${key}={${JSON.stringify(value)}}`;
  }).join(" ");
}

function capitalize(str) {
  if (!str) return ""; // Handle empty or null strings
  return str.charAt(0).toUpperCase() + str.slice(1);
}

// Generate JSX for the entire AST
function generateJSX(node, indent = "  ") {
  const { type, props, children } = node;
  const childIndent = indent + "  "; // Deeper indent for children

  // Handle 'If' blocks
  if (type === "If") {
    const condition = node.condition; // 'condition' is a property of If nodes
    const innerChildren = children.map(child => generateJSX(child, childIndent)).join("\n");
    // Generate a ternary operator for the If block
    return `${indent}{${condition} ? (\n${innerChildren}\n${indent}) : null}`;
  }

  // Handle 'For' blocks
  if (type === "For") {
    const { item, list } = node; // 'item' and 'list' are properties of For nodes
    const innerChildren = children.map(child => generateJSX(child, childIndent + "  ")).join("\n"); // Extra indent for children inside map
    // Generate a list.map() function
    return `${indent}{${list}.map((${item}) => (\n${childIndent}  <React.Fragment key={${item}.id || JSON.stringify(${item})}>\n${innerChildren}\n${childIndent}  </React.Fragment>\n${indent}))}`;
  }

  // Handle standard elements
  const jsxTag = tagMap[type] || type; // Translate to real HTML tag or use as-is
  const propStr = renderProps(props); // Get props string

  if (!children || children.length === 0) {
    // Self-closing tag if no children
    return `${indent}<${jsxTag}${propStr ? " " + propStr : ""} />`;
  }

  // Element with children
  const inner = children.map(child => generateJSX(child, childIndent)).join("\n");
  return `${indent}<${jsxTag}${propStr ? " " + propStr : ""}>\n${inner}\n${indent}</${jsxTag}>`;
}

const jsxBody = ast.map(node => generateJSX(node)).join("\n");

// Final React component wrapper
const output = `// Auto-generated by UIX compiler
import React from "react";

export default function CompiledUI({ name, setName, greet }) {
  // You might need to define 'name', 'setName', 'greet' as state or props in your actual React app
  // For 'bind' functionality, ensure state variables like 'name' are defined and 'setName' is available.
  // Example state for 'name' if not passed as prop:
  // const [name, setName] = React.useState('');

  return (
    <>
${jsxBody}
    </>
  );
}
`;

fs.writeFileSync("src/CompiledUI.jsx", output);
console.log("âœ… Compiled: src/CompiledUI.jsx");