import fs from "fs";
import * as parser from "./parser.js";

const code = fs.readFileSync("uix/example.uix", "utf-8");
const tagMap = {
  App: "div",
  Title: "h1",
  Row: "div",
  Button: "button",
  Input: "input",
  Text: "span",
};

// Parse UIX source code to AST
const ast = parser.parse(code);

// Convert props to JSX string
function renderProps(props) {
  const safeProps = props || {};
  return Object.entries(safeProps).map(([key, value]) => {
    if (key === "bind") {
      return `value={${value}} onChange={e => set${capitalize(value)}(e.target.value)}`;
    }
    if (key.startsWith("on")) {
      return `${key}={${value}}`;
    }
    if (typeof value === "string") {
      return `${key}="${value}"`;
    }
    return `${key}={${JSON.stringify(value)}}`;
  }).join(" ");
}

// Capitalize for setName → Name
function capitalize(str) {
  return str ? str.charAt(0).toUpperCase() + str.slice(1) : "";
}

// Recursively render JSX from AST
function generateJSX(node, indent = "  ") {
  const { type, props, children } = node;
  const childIndent = indent + "  ";

  if (type === "If") {
    const condition = node.condition;
    const inner = children.map(c => generateJSX(c, childIndent)).join("\n");
    return `${indent}{${condition} ? (\n${inner}\n${indent}) : null}`;
  }

  if (type === "For") {
    const { item, list } = node;
    const inner = children.map(c => generateJSX(c, childIndent + "  ")).join("\n");
    return `${indent}{${list}.map((${item}) => (\n${childIndent}  <React.Fragment key={${item}.id || JSON.stringify(${item})}>\n${inner}\n${childIndent}  </React.Fragment>\n${indent}))}`;
  }

  const jsxTag = tagMap[type] || type;
  const propStr = renderProps(props);

  if (!children || children.length === 0) {
    return `${indent}<${jsxTag}${propStr ? " " + propStr : ""} />`;
  }

  const inner = children.map(c => generateJSX(c, childIndent)).join("\n");
  return `${indent}<${jsxTag}${propStr ? " " + propStr : ""}>\n${inner}\n${indent}</${jsxTag}>`;
}

// Build the full JSX body
const jsxBody = ast.map(node => generateJSX(node)).join("\n");

// Final component output
const output = `// Auto-generated by UIX compiler
import React from "react";

export default function CompiledUI({ name, setName, greet, users, showMore, toggle }) {
  return (
    <>
${jsxBody}
    </>
  );
}
`;

fs.writeFileSync("src/CompiledUI.jsx", output);
console.log("✅ Compiled: src/CompiledUI.jsx");
