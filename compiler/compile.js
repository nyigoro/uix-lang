import fs from "fs";
import * as parser from "./parser.js";

const code = fs.readFileSync("uix/example.uix", "utf-8");
const tagMap = {
  App: "div",
  Title: "h1",
  Row: "div",
  Button: "button",
  Input: "input",
  Text: "span"
};

const ast = parser.parse(code);

// Identifier tracking
const usedIdentifiers = new Set();
const boundVariables = new Set(); // For bind:name
const usedSetters = new Set();    // For setName
const stateDefaults = {};         // name: "" (can extend to support bind:count => 0)

function capitalize(str) {
  return str ? str.charAt(0).toUpperCase() + str.slice(1) : "";
}

function extractIdentifiers(value) {
  if (typeof value === "string") {
    const parts = value.split(".");
    usedIdentifiers.add(parts[0]);
  }
}

function renderProps(props) {
  const safeProps = props || {};
  return Object.entries(safeProps).map(([key, value]) => {
    extractIdentifiers(value);

    if (key === "bind") {
      boundVariables.add(value);
      usedIdentifiers.add(`set${capitalize(value)}`);
      stateDefaults[value] = ""; // default to empty string
      return `value={${value}} onChange={e => set${capitalize(value)}(e.target.value)}`;
    }
    if (key.startsWith("on")) {
      return `${key}={${value}}`;
    }
    if (key === "text") {
      return null; // handled as child
    }
    return `${key}="${value}"`;
  }).filter(Boolean).join(" ");
}

function generateJSX(node, indent = "  ") {
  const { type, props, children } = node;
  const childIndent = indent + "  ";

  if (type === "If") {
    extractIdentifiers(node.condition);
    const body = children.map(c => generateJSX(c, childIndent)).join("\n");
    return `${indent}{${node.condition} ? (\n${body}\n${indent}) : null}`;
  }

  if (type === "For") {
    extractIdentifiers(node.list);
    usedIdentifiers.add(node.item);
    const body = children.map(c => generateJSX(c, childIndent + "  ")).join("\n");
    return `${indent}{${node.list}.map((${node.item}) => (\n${childIndent}<React.Fragment key={${node.item}.id || JSON.stringify(${node.item})}>\n${body}\n${childIndent}</React.Fragment>\n${indent}))}`;
  }

  const jsxTag = tagMap[type] || type;
  const propStr = renderProps(props);
  const innerText = props?.text ? `{${props.text}}` : null;
  if (innerText) extractIdentifiers(props.text);

  const inner = [
    innerText,
    ...(children || []).map(c => generateJSX(c, childIndent))
  ].filter(Boolean).join("\n");

  return `${indent}<${jsxTag}${propStr ? " " + propStr : ""}>\n${inner}\n${indent}</${jsxTag}>`;
}

const jsxBody = ast.map(node => generateJSX(node)).join("\n");

// Sort all identifiers
const allUsed = new Set([...usedIdentifiers, ...boundVariables]);
const propsToInject = Array.from(allUsed).sort();

// Auto-generate React.useState() lines
const autoStates = Array.from(boundVariables)
  .map(varName => `  const [${varName}, set${capitalize(varName)}] = React.useState(${JSON.stringify(stateDefaults[varName] ?? "")});`)
  .join("\n");

// Generate prop destructuring
const propDestructure = propsToInject
  .filter(p => !boundVariables.has(p) && !p.startsWith("set"))
  .join(", ");

const output = `// Auto-generated by UIX compiler
import React from "react";

export default function CompiledUI({ ${propDestructure} }) {
${autoStates ? autoStates + "\n" : ""}
  return (
    <>
${jsxBody}
    </>
  );
}
`;

fs.writeFileSync("src/CompiledUI.jsx", output);
console.log("✅ Compiled with props:", propDestructure || "(none)");
if (autoStates) {
  console.log("✅ Injected state for:", Array.from(boundVariables).join(", "));
}
